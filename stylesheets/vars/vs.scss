/**
 *
 * Below we have definition of 'vs' mixin for using size as a linear function of resolution.
 *
 * This mixin uses bootstrap breakpoints so please attach bootstrap breakpoints to the project to make it work properly.
 *
 * Mathematically, mixin works this way. When w call: @include vs(prop, $VSmin, $VSmax), the CSS property named 'prop' (can be any property) will have following value:
 *
 * - for range (0; sm): $VSmin
 * - for range (sm; xl): linear function with value from $VSmin to $VSmax
 * - for range (xl; infinity): $VSmax
 *
 * Please use this method for every font size and every vertical spacing in the project.
 *
 */

@function get-linear-size($mobile-size, $desktop-size) {

  $a: ($desktop-size - $mobile-size) / (map-get($grid-breakpoints, $resolution-range-top) - map-get($grid-breakpoints, breakpoint-next($resolution-range-bottom)));
  $b: -$a * map-get($grid-breakpoints, breakpoint-next($resolution-range-bottom));

  @return calc(#{$a} * 100vw + #{$b + $mobile-size});
}

@mixin vs($field, $mobile-size, $desktop-size) {

  #{$field}: get-linear-size($mobile-size, $desktop-size);

    @include media-breakpoint-down($resolution-range-bottom) {
        #{$field}: $mobile-size;
    }

    @include media-breakpoint-up($resolution-range-top) {
        #{$field}: $desktop-size;
    }
}

/**
 * Example of finite number of vertical spacings. Keep in mind they're taken from another project, so they're not suitable for this task. It's just an example.
 */

// Desktop spacings
$VS1d: 20px;
$VS2d: 25px;
$VS3d: 30px;
$VS4d: 50px;
$VS5d: 70px;
$VS6d: 100px;
$VS7d: 150px;
$VS8d: 200px;

// Mobile spacings
$VS1m: 10px;
$VS2m: 20px;
$VS3m: 30px;
$VS4m: 40px;
$VS5m: 50px;

/**
 * Example of how to make vertical spacings in the project:
 */
// .imaginary-example-item {
//   @include vs(margin-top, $VS2m, $VS3d);
//   @include vs(margin-bottom, $VS1m, $VS2d);
// }




